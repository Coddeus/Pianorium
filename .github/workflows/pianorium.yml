name: Pianorium

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

env:
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_DEV_BUILD_OVERRIDE_DEBUG: true
  RUST_BACKTRACE: 1

jobs: 
  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
    - name: Use @checkout
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt-get -y --no-install-recommends clang curl libsdl2-dev ffmpeg pkg-config

    - name: Build
      shell: sh
      run: cargo build --release --verbose

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Use @checkout
      uses: actions/checkout@v3
  
    - name: Install FFmpeg
      shell: sh
      run: |
        echo export LIBRARY_PATH=\"$LIBRARY_PATH:$(brew --prefix)/lib\" >> ~/.bash_profile
        brew install sdl2 ffmpeg pkg-config
  
    - name: Build
      shell: sh
      run: cargo build --release --verbose

  build-windows:
    runs-on: windows-latest
    steps:
    - name: Use @checkout
      uses: actions/checkout@v3
  
    - name: Install SDL2
      shell: pwsh
      run: "D:/a/Pianorium/Pianorium/script/windows/SDL2-prebuilt.ps1"
  
    - name: Install FFmpeg
      shell: pwsh
      run: "D:/a/Pianorium/Pianorium/script/windows/ffmpeg-prebuilt.ps1"
  
    - name: Build
      shell: sh
      run: cargo build --release --verbose
  
  
  
  
  
  
  
  
  
  
  
  # Add caching
  #  build-linux:
  #    runs-on: ubuntu-latest
  #    steps:
  #    - uses: actions/checkout@v3
  #
  #    - name: Install dependencies
  #      run: |
  #        cd /home
  #        sudo apt-get update -y -qq && sudo apt-get -y install ffmpeg libsdl2-2.0-0
  #
  #    - name: Check SDL2
  #      shell: bash
  #      run: |
  #        set -xeuo pipefail
  #        rustc --version
  #        cargo --version
  #        
  #    - name: Find dependencies paths
  #      run: sudo find / -name libavutil.pc && sudo find / -name libavutil.a && sudo find / -name libSDL2.a
  #
  #    - name: Build
  #      run : PKG_CONFIG_PATH="/home/ffmpeg" RUST_BACKTRACE=1 cargo build --verbose
  
  #   build-macos:
  #     runs-on: macos-latest
  #     steps:
  #     - uses: actions/checkout@v3
  # 
  #     - name: Install dependencies
  #       run: |
  #         curl -L -k -o SDL2-2.28.2.tar.gz "https://github.com/libsdl-org/SDL/releases/download/release-2.28.2/SDL2-devel-2.28.2-mingw.tar.gz"
  #         tar -xvf SDL2-2.28.2.tar.gz
  #         cp -r "/Users/runner/work/Pianorium/Pianorium/SDL2-2.28.2/x86_64-w64-mingw32/lib/" "/Users/runner/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/lib/"
  #         brew tap homebrew-ffmpeg/ffmpeg
  #         brew install homebrew-ffmpeg/ffmpeg/ffmpeg \
  #           --with-x264 \
  #           --with-x265 \
  # 
  #       env: 
  #         FFMPEG_DIR: /usr/local/Cellar/ffmpeg/6.0
  # 
  #     # DEBUG
  #     # - name: Find dependencies paths
  #     #   run: sudo find / -name libavutil.a & sudo find / -name libSDL2.a
  # 
  #     - name: Build
  #       run: RUST_BACKTRACE=1 cargo build --verbose

#     build-windows-msys:
#       runs-on: windows-latest
#       steps:
# #      - name: Make @msys and @checkout compatible
# #        shell: pwsh
# #        run: git config --global core.autocrlf input
#   
#       - name: Use @checkout
#         uses: actions/checkout@v3
#   
# #      - name: Install Msys and required libraries
# #        uses: msys2/setup-msys2@v2
# #        with:
# #          msystem: mingw64
# #          install: make git diffutils nasm yasm pkgconf mingw-w64-x86_64-gcc
#   
# #      - name: Update GitHub $ENV and $PATH
# #        shell: pwsh
# #        run: D:/a/Pianorium/Pianorium/script/windows/env-path.ps1 | Out-Null
#   
# #      - name: Launch x64 Native Tools Command Prompt
# #        uses: ilammy/msvc-dev-cmd@v1
# #        with:
# #          arch: x64
# #      - name: Update Msys packages
# #        continue-on-error: true
# #        run: msys2_shell.cmd -c "D:/a/Pianorium/Pianorium/script/windows/pacman_update.sh" | Out-Null
#   
# #      # DEBUG
# #      - name:  \[DEBUG\] Find files paths
# #        shell: cmd
# #        run: |
# #          cd D:/
# #          dir /s gcc.exe make.exe msys2_shell.cmd vcvars64.bat vcvarsall.bat 
# 
#       - name: Install SDL2
#         shell: pwsh
#         run: "D:/a/Pianorium/Pianorium/script/windows/SDL2-prebuilt.ps1"
# 
#       - name: Install FFmpeg
#         shell: pwsh
#         run: "D:/a/Pianorium/Pianorium/script/windows/ffmpeg-prebuilt.ps1"
#   
# #      - name: Launch x64 Native Tools Command Prompt
# #        uses: ilammy/msvc-dev-cmd@v1
# #        with:
# #          arch: x64
# #      - name: Install FFmpeg
# #        run: msys2_shell.cmd -c "D:/a/Pianorium/Pianorium/script/windows/x264-ffmpeg.sh" | Out-Null
#   
#       - name: Build
#         shell: sh
#         run: cargo build --release --verbose






# # vcpkg
# jobs:
#   build:
# 
#     strategy:
#       fail-fast: false
#       matrix:
#         platform: [macos-latest, ubuntu-latest, windows-latest]
# 
#     runs-on: ${{ matrix.platform }}
# 
#     steps:
#     - uses: actions/checkout@v3
#     - name: Install vcpkg
#       run: |
#         ./vcpkg/bootstrap-vcpkg.bat
# 
#     - name: Build
#       run: cargo build --verbose
#     - name: Run tests
#       run: cargo test --verbose


# # From ffmpeg-next
#  build-linux:
#    runs-on: ubuntu-latest
#    container: jrottenberg/ffmpeg:6.0-ubuntu
#    steps:
#      - uses: actions/checkout@v2
#      - name: Install dependencies
#        run: |
#          apt update
#          apt install -y --no-install-recommends clang curl pkg-config
#      - name: Set up Rust
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          override: true
#          components: rustfmt, clippy
#      - name: Build
#        run: |
#          cargo build
#
#  build-macos:
#    runs-on: macos-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Install dependencies
#        run: |
#          brew install ffmpeg pkg-config
#      - name: Set up Rust
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          override: true
#          components: rustfmt, clippy
#      - name: Build
#        run: |
#          cargo build
#
#  build-windows:
#    runs-on: windows-latest
#    strategy:
#      matrix:
#        include:
#          - ffmpeg_version: latest
#            ffmpeg_download_url: https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z
#      fail-fast: false
#    env:
#      FFMPEG_DOWNLOAD_URL: ${{ matrix.ffmpeg_download_url }}
#    steps:
#      - uses: actions/checkout@v2
#      - name: Install dependencies
#        run: |
#          $VCINSTALLDIR = $(& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath)
#          Add-Content $env:GITHUB_ENV "LIBCLANG_PATH=${VCINSTALLDIR}\VC\Tools\LLVM\x64\bin`n"
#          Invoke-WebRequest "${env:FFMPEG_DOWNLOAD_URL}" -OutFile ffmpeg-release-full-shared.7z
#          7z x ffmpeg-release-full-shared.7z
#          mkdir ffmpeg
#          mv ffmpeg-*/* ffmpeg/
#          Add-Content $env:GITHUB_ENV "FFMPEG_DIR=${pwd}\ffmpeg`n"
#          Add-Content $env:GITHUB_PATH "${pwd}\ffmpeg\bin`n"
#      - name: Set up Rust
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          override: true
#          components: rustfmt, clippy
#      - name: Build
#        run: |
#          cargo build